type Query {
  login(input: LoginInput!): LoginResponse
  logout: LogoutResponse
  refreshToken(refreshToken: String): RefreshTokenQueryResponse
}

input LoginInput {
  email: String!
  password: String!
  grantType: String
}

input AddUserInput {
  email: String!
  password: String!
}

type LoginResponse {
  statusCode: Int!
  data: Login
  error: Error
}
type Login {
  accessToken: AccessToken!
  refreshToken: RefreshToken!
  tokenType: String!
  role: Int!
}

type RefreshTokenQueryResponse {
  statusCode: Int
  message: String
  data: AccessToken
  error: Error
}

type Mutation {
  changePassword(changePassword: ChangePasswordInput): ChangePasswordResponse
  addUser(input: AddUserInput!): MutationResponse
}

input ChangePasswordInput {
  password: String
  newPassword: String
}

type ChangePasswordResponse {
  statusCode: Int
  message: String
  data: ChangePassword
  error: Error
}

type ChangePassword {
  userId: Int
}

type AccessToken {
  accessToken: String
  expiredAt: Int
}

type RefreshToken {
  refreshToken: String
  expiredAt: Int
}

type LogoutResponse {
  statusCode: Int
  message: String
  error: Error
  data: Logout
}

type Logout {
  userId: Int
}
